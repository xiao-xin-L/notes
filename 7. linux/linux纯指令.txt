cd [目录]					进入目录
pwd					查看当前目录
ls					查看当前目录下的所有目录(-a显示所有文件和目录(包括.和..开头的隐藏文件))(-l使用长格式列出文件及目录信息)

mkdir [参数] [目录]				创建目录(-m建立目录的同时设置目录的权限)(-p递归创建多级目录)
touch [参数] [文件]				创建文件
rmdir [参数] [目录]				删除空目录
rm [参数] [目录或文件]			删除目录或文件(-r删除目录用的选项,可删空目录)(-i删除前会询问用户是否操作)(-f强制删除)
rm -rf /*					删除根目录下的所有文件(跑路前的指令)
cp [参数] [源文件] [目标文件]			复制文件或目录(-r复制目录)(-i遇到已存在的文件,会询问是否覆盖)
mv [参数] [源文件或目录] [目标文件或目录]		移动文件或文件重命名

cat [参数] [文件]				显示文件内容(-n显示行数)(-A显示所有内容包括特殊字符)
tac [参数] [文件]				反向显示文件内容
more [参数] [文件]				显示文件内容(只显示一屏幕的内容)(ctrl+b向上翻页)(ctrl+f/空格向下翻页)(enter看下一行)(q退出)
less [参数] [文件]				显示文件内容(j或下方向键向下移动一行)(k或上方向键向上移动一行)(空格向下翻页)(/s向下查找字符串)(?s向上查找字符串)
head [参数] [文件]				默认显示文件的前10行(-n显示文件的前几行)
tail [参数] [文件]				默认显示文件的最后10行(-n显示文件的最后几行)

groupadd [组名]				添加一个用户组
useradd [用户名]				添加一个用户
chgrp [组名] [文件]				更改文件的所属组
chown [用户名] [文件]			更改文件的所有者
chmod [参数] [文件]				更改文件的权限(r:4 w:2 x:1 -:0)
chmod 777 123.txt				三组权限都可读可写可执行(第一组:创建者 第二组:创建者所在组 第三组:其他用户)
umask [参数] [权限掩码]			设置权限掩码(u=rwx 创建者)(g=rwx 创建者所在组)(o=rwx 其他用户)

which [参数] [文件]				查找PATH环境变量中出现的路径下的可执行文件的路径
whereis [参数] [命令名]			查找显示命令及相关文件的路径(-b只查找二进制文件)(-m只查找帮助文件)(-s只查找源代码文件)
find [路径] [参数]				查找或搜索文件(-atime +n/-n：表示访问或执行时间大于或小于n天的文件)
(-ctime +n/-n：表示写入、更改inode属性（如更改所有者、权限或者链接）的时间大于或小于n天的文件)
(-mtime +n/-n：表示写入时间大于或小于n天的文件，该参数用得最多)
(-name filename 根据文件名字查找文件)
cat /etc/filesystems				查看系统所支持的文件系统类型

df [参数] [指定文件]				查看已挂载磁盘的总容量(-i 查看inode的使用情况)(-h 使用合适的单位显示)(-k 以KB为单位显示)(-m 以MB为单位显示)
du [参数] [文件或目录]			查看某个目录或文件所占空间的大小(-a 查看所有文件或目录)(-b 以B为单位输出)(-k以KB为单位输出)(-m 以MB为单位输出)(-g 以GB为单位输出)(-h 系统自动调节单位)(-c 最后加总)(-s 只列出总和)

fdisk [参数] [设备名称]			Linux下硬盘的分区工具(不加设备名称, 会直接列出系统中所有的磁盘设备以及分区表; 加上设备名称，则会列出该设备的分区表)
mount					查看当前系统已经挂载的所有分区
umount					卸载磁盘

vim工具使用
一般模式
vim filename 		进入一般模式
h或向左的方向键		向左移动一个字符
j或向下的方向键		向下移动一个字符
k或向上的方向键		向上移动一个字符
l或向右的方向键		向右移动一个字符
ctrl+b			向下翻页
ctrl+f			向上翻页
数字0或shift+6		移动到本行行首
shift+4			移动到本行行尾
gg			移动到行首
G			移动到行尾
nG			移动到第n行
x			向后删除一个字符
X			向前删除一个字符
nx			向后删除n个字符
dd			删除/剪切光标所在那一行
ndd			删除/剪切光标所在行之后的n行
yy			复制光标所在行
p			从光标所在行开始, 向下粘贴已经复制的内容
P			从光标所在行开始, 向上粘贴已经复制的内容
nyy			从光标所在行开始, 向下复制n行
u			还原上一步操作
v			选中指定内容实现复制粘贴
编辑模式
i			在当前字符前插入
I			在光标所在行的行首插入
a			在当前字符后插入
A			在光标所在行的行尾插入
o			在当前行的下一行插入新的一行
O			在当前行的上一行插入新的一行
ESC			退出编辑模式回到一般模式
命令模式
输入: 或 /			进入命令模式
/word			在光标之后查找该字符串, n向后继续查找
?word			在光标之前查找该字符串, n向前继续查找
:n1, n2s/word1/word2/g   	在n1和n2行之间查找word1并替换为word2, 不加g则只替换每行的第一个word1
:1, $s/word1/word2/g   	将文档中所有的word1替换为word2，不加g则只替换每行的第一个word1
:w			保存文件
:w!			强制保存文件
:q			退出vim
:q!			强制退出vim
:set nu			显示行号
:set nonu			不显示行号

gzip [参数] [filename]	压缩后缀为 .gz,  只能压缩文件 (-d 解压)(-# 压缩等级, 1最差, 9最好, 默认为6)
bzip2 [参数] [filename]	压缩后缀为 .bz2,  只能压缩文件 (-d 解压)(-z 强制压缩)(压缩等级为1~9,  默认为9)
xz [参数] [filename]		压缩后缀为 .xz,  只能压缩文件 (-d 解压)(-z 强制压缩)
zip [参数] [filename or dirname]	压缩后缀为 .zip, 可以压缩文件和目录 (-r 递归压缩) (压缩目录需要指定目录下的文件)
tar [参数] [filename] [target]	打包工具 (-z 同时用gzip压缩) (-j 同时用bzip2压缩) (-J 同时用xz压缩) (-x 解压) (-t 查看tar包里的文件) (-c 建立一个tar包或压缩文件包) (-v 可视化压缩或解压) (-f 以后面的filename命名压缩文件) (-p 使用原文件的属性) (-P 使用绝对路径)

wget [参数] [网络路径]	从指定的url下载文件(-O [文件名] 下载并以不同的文件名保存)(--limit-rate=300k 限速下载)(-c 断点续传)(-b 后台下载)
rpm [参数] [软件包]		RPM软件包管理器(-i 安装软件包)(-v 可视化安装过程)(-h 显示安装进度)(-e 卸载软件包)(--force 强制安装)(--nodeps 当要安装的RPM包依赖于其他包时，即使其他包没有安装，也要安装这个包)
yum install -y [RPM包]	安装RPM包
yum list			列出所有的RPM包资源
yum search [相关关键词]	搜索RPM包
yum remove [软件包]		卸载包
yum update -y [RPM包]	更新包
后面再说

cat /root/.base_history	用户的历史指令
alias xiaoxin="ls -ls"		命令的别名
unalias xiaoxin		解除命令的别名
*符 和 ? 符			使用 * 来匹配零个或多个字符，用 ? 匹配一个字符
echo			输出变量的值(取用变量的时候, 前面要加一个$符号)
env			列出系统预设的全部系统变量
set			列出系统预设和用户自定义的全部变量
#			linux中的注释符号
\			转义字符,  会将后面的特殊字符变为普通字符
|			管道符
cut -d '分隔字符' [-cf] n	截取某个字段(-d 自定义分隔符)(-c 以字符为单位进行分割)(-f 显示指定字段的内容)
sort [-t 分隔符] [-kn1, n2] [-nru]	对文件中的内容进行排序(-t 相当于cut的-d)(-n 使用纯数字排序)(-r 反向排序)(-u 去重)( -kn1,n2 由n1区间排序到n2区间，可以只写-kn1，即对n1字段排序)
uniq [文件]		删除重复的行(使用uniq前，必须先给文件排序，否则不管用)
split [参数] [文件]		切割文档(-b 依据大小来分割文档, 单位为byte)(-l 依据行数来分割文档)
在一行中运行两个以上的命令, 需在中间添加分号
符号~表示root用户,  普通用户是/home

shell脚本
touch test.sh		创建后缀名为.sh的shell脚本文件
shell脚本的第一行必须是 #! /bin/base   注释要写在最前面   后面的注释都不是必要的
sh [-x] [shell脚本]		运行shell脚本(-x 查看这个脚本的执行过程)(CST 美国中部的标准时间)
date			输出当前日期
a=`date`  b="123"		shell中的变量(反引号的作用: 将引号中的字符串当成shell命令执行)
$[$c+$d]			shell中的数学运算(变量前面要加上$)(整个表示要加上$[],  否则+号会被当成字符串,  拼接前后变量的值)
read [参数]  "提示信息" 变量	与用户交互
shell脚本的控制流程
条件判断
if [ 判断语句 ];then
	echo ""
elif [ 判断语句 ];then
	echo ""
else
	echo ""
case语句
case 变量 in
	value1)
		echo ""
	;;
	value2)
		echo ""
	;;
	*)
		echo ""
	;;
	esac
for 循环
for 变量 in 循环条件;do
	echo ""
done
while 循环
while 循环条件;do
	echo ""
done
shell中的函数
log(){
	echo ""
}
log 1
shell中的中断和继续
break语句(跳出当前循环)
continue语句(跳出本次循环)
exit语句(退出shell脚本)

w		查看当前系统负载
cat /proc/cpuinfo	查看CPU信息
vmstat		监控系统的状态
top		显示进程所占的系统资源
sar		监控系统的状态
nload		查看网卡流量
free		查看内存使用情况
ps		查看系统进程
ifconfig		查看网络配置信息
crontab [参数]	任务计划(-e 制定任务计划 (进入指定的文件) )(-l 列出任务计划)(-r 删除任务计划)
进入文件后写入以下文件内容
0(分)  0(时)  *(日)  *(月)  *(周)  /home/myproject/test.sh	表示每天的0时0分执行 /home/myproject/test.sh文件